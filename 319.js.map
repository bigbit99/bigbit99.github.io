{"version":3,"file":"319.js","mappings":"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","sources":["webpack://sleact-ts-front/./components/Loading.tsx","webpack://sleact-ts-front/./hooks/useInput.ts","webpack://sleact-ts-front/./pages/SignUp/index.tsx","webpack://sleact-ts-front/./pages/SignUp/styles.tsx","webpack://sleact-ts-front/./utils/fetcher.ts"],"sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\n\nconst Loading = () => {\n  return (\n    <Wrap>\n      <div></div>\n    </Wrap>\n  );\n};\n\nexport default Loading;\n\nconst Wrap = styled.div`\n  width: 100%;\n  height: 100vh;\n  background-color: #441949;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  > div:nth-child(1) {\n    height: 70px;\n    width: 70px;\n    border-radius: 50%;\n    border: dashed 5px white;\n    -webkit-animation-name: spin;\n    -webkit-animation-duration: 2.5s;\n    -webkit-animation-iteration-count: infinite;\n    -webkit-animation-timing-function: linear;\n  }\n  @-webkit-keyframes spin {\n    from {\n      -webkit-transform: rotate(0deg);\n    }\n    to {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n`;\n","import { Dispatch, SetStateAction, useCallback, useState, ChangeEvent } from 'react';\n\ntype ReturnTypes<T> = [T, (e: ChangeEvent<HTMLInputElement>) => void, Dispatch<SetStateAction<T>>];\n\nconst useInput = <T>(initialData: T): ReturnTypes<T> => {\n  const [value, setValue] = useState(initialData);\n  const handler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setValue(e.target.value as unknown as T);\n  }, []);\n  return [value, handler, setValue];\n};\n\nexport default useInput;\n\n//🔥ts로 시작하는 에러는 타입스크립트 에러\n//🔥🔥ts가 js의 변수, 매개변수, return값에 타입을 붙여줘야함\n//🔥🔥🔥특히 매개변수는 타입을 붙여줘야 에러가 안난다.\n\n//as unknown as T -> 타입스크립트에서 타입을 강제로 바꿔주는 방법\n","import useInput from '@hooks/useInput';\nimport React, { useCallback, useState, VFC } from 'react';\nimport axios from 'axios';\nimport { Success, Form, Error, Label, Input, LinkContainer, Button, Header } from './styles';\nimport { Link, Redirect } from 'react-router-dom';\nimport useSWR from 'swr';\nimport fetcher from '@utils/fetcher';\nimport Loading from '@components/Loading';\n\nconst SignUp = () => {\n  const { data, error, mutate } = useSWR('/api/users', fetcher);\n  const [email, onChangeEmail] = useInput('');\n  const [nickname, onChangeNickname] = useInput('');\n  const [password, setPassword] = useState('');\n  const [passwordCheck, setPasswordCheck] = useState('');\n  const [mismatchError, setMismatchError] = useState(false);\n  const [signUpError, setSignUpError] = useState('');\n  const [signUpSuccess, setSignUpSuccess] = useState(false);\n\n  //useCallback을 써주어야 성능 최적화가 됨\n\n  const onChangePassword = useCallback(\n    (e) => {\n      setPassword(e.target.value);\n      setMismatchError(e.target.value !== passwordCheck);\n    },\n    [setPasswordCheck],\n  );\n\n  const onChangePasswordCheck = useCallback(\n    (e) => {\n      setPasswordCheck(e.target.value);\n      setMismatchError(e.target.value !== password);\n    },\n    [password],\n  );\n\n  const onSubmit = useCallback(\n    (e) => {\n      e.preventDefault();\n\n      if (!mismatchError) {\n        console.log('서버로 회원가입하기');\n        setSignUpError('');\n        setSignUpSuccess(false); //🔥비동기 요청 전 setState들을 초기화 해주는 것이 좋다. 요청을 연달아 보낼 때 첫번째 요청의 결과가 다음 요청에 남아있는 문제를 방지해줌\n        axios\n          .post('/api/users', {\n            email,\n            nickname,\n            password,\n          })\n          .then((response) => {\n            console.log(response);\n            setSignUpSuccess(true);\n          }) //🔥성공하는 경우\n          .catch((error) => {\n            console.log(error);\n            setSignUpError(error.response.data); //에러났을 때 에러메시지 출력 , error났을 때 응답(response)의 data\n          }) //🔥실패하는 경우\n          .finally(() => {}); //🔥성공하든 실패하든 공통적으로 하고 싶은 경우\n      }\n    },\n    [email, nickname, password, passwordCheck, mismatchError],\n  );\n\n  if (data === undefined) {\n    return <Loading />;\n  }\n\n  if (data) {\n    return <Redirect to=\"/workspace/sleact/channel/일반\" />;\n  }\n  //🔥🔥🔥return은 항상 hooks보다 아래에 있어야 함!!!🔥🔥🔥\n  return (\n    <div id=\"container\">\n      <Header>Sleact</Header>\n      <Form onSubmit={onSubmit}>\n        <Label id=\"email-label\">\n          <span>이메일 주소</span>\n          <div>\n            <Input type=\"email\" id=\"email\" name=\"email\" value={email} onChange={onChangeEmail} />\n          </div>\n        </Label>\n        <Label id=\"nickname-label\">\n          <span>닉네임</span>\n          <div>\n            <Input type=\"text\" id=\"nickname\" name=\"nickname\" value={nickname} onChange={onChangeNickname} />\n          </div>\n        </Label>\n        <Label id=\"password-label\">\n          <span>비밀번호</span>\n          <div>\n            <Input type=\"password\" id=\"password\" name=\"password\" value={password} onChange={onChangePassword} />\n          </div>\n        </Label>\n        <Label id=\"password-check-label\">\n          <span>비밀번호 확인</span>\n          <div>\n            <Input\n              type=\"password\"\n              id=\"password-check\"\n              name=\"password-check\"\n              value={passwordCheck}\n              onChange={onChangePasswordCheck}\n            />\n          </div>\n          {mismatchError && <Error>비밀번호가 일치하지 않습니다.</Error>}\n          {!nickname && <Error>닉네임을 입력해주세요.</Error>}\n          {signUpError && <Error>{signUpError}</Error>}\n          {signUpSuccess && <Success>회원가입되었습니다! 로그인해주세요.</Success>}\n        </Label>\n        <Button type=\"submit\">회원가입</Button>\n      </Form>\n      <LinkContainer>\n        이미 회원이신가요?&nbsp;\n        <Link to=\"/login\">로그인 하러가기</Link>\n      </LinkContainer>\n    </div>\n  );\n};\n\nexport default SignUp;\n","import styled from '@emotion/styled';\n\nexport const Header = styled.header`\n  text-align: center;\n  font-family: Slack-Larsseit, Helvetica Neue, Helvetica, Segoe UI, Tahoma, Arial, sans-serif;\n  font-weight: 700;\n  font-size: 48px;\n  line-height: 46px;\n  letter-spacing: -0.75px;\n  margin-top: 50px;\n  margin-bottom: 50px;\n`;\n\nexport const Form = styled.form`\n  margin: 0 auto;\n  width: 400px;\n  max-width: 400px;\n`;\n\nexport const Label = styled.label`\n  margin-bottom: 16px;\n  & > span {\n    display: block;\n    text-align: left;\n    padding-bottom: 8px;\n    font-size: 15px;\n    cursor: pointer;\n    line-height: 1.46666667;\n    font-weight: 700;\n  }\n`;\n\nexport const Input = styled.input`\n  border-radius: 4px;\n  --saf-0: rgba(var(--sk_foreground_high_solid, 134, 134, 134), 1);\n  border: 1px solid var(--saf-0);\n  transition: border 80ms ease-out, box-shadow 80ms ease-out;\n  box-sizing: border-box;\n  margin: 0 0 20px;\n  width: 100%;\n  color: rgba(var(--sk_primary_foreground, 29, 28, 29), 1);\n  background-color: rgba(var(--sk_primary_background, 255, 255, 255), 1);\n  padding: 12px;\n  height: 44px;\n  padding-top: 11px;\n  padding-bottom: 13px;\n  font-size: 18px;\n  line-height: 1.33333333;\n  &:focus {\n    --saf-0: rgba(var(--sk_highlight, 18, 100, 163), 1);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 0 0 5px rgba(29, 155, 209, 0.3);\n  }\n`;\n\nexport const Button = styled.button`\n  margin-bottom: 12px;\n  width: 100%;\n  max-width: 100%;\n  color: #fff;\n  background-color: #4a154b;\n  border: none;\n  font-size: 18px;\n  font-weight: 900;\n  height: 44px;\n  min-width: 96px;\n  padding: 0 16px 3px;\n  transition: all 80ms linear;\n  user-select: none;\n  outline: none;\n  cursor: pointer;\n  border-radius: 4px;\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.3);\n  &:hover {\n    background-color: rgba(74, 21, 75, 0.9);\n    border: none;\n  }\n  &:focus {\n    --saf-0: rgba(var(--sk_highlight, 18, 100, 163), 1);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 0 0 5px rgba(29, 155, 209, 0.3);\n  }\n`;\n\nexport const Error = styled.div`\n  color: #e01e5a;\n  margin: 8px 0 16px;\n  font-weight: bold;\n`;\n\nexport const Success = styled.div`\n  color: #2eb67d;\n  font-weight: bold;\n`;\n\nexport const LinkContainer = styled.p`\n  font-size: 13px;\n  color: #616061;\n  margin: 0 auto 8px;\n  width: 400px;\n  max-width: 400px;\n  & a {\n    color: #1264a3;\n    text-decoration: none;\n    font-weight: 700;\n    &:hover {\n      text-decoration: underline;\n    }\n  }\n`;\n","import axios from 'axios';\n\nconst fetcher = (url: string) =>\n  axios\n    .get(url, {\n      withCredentials: true, //쿠키공유하기\n    })\n    .then((response) => response.data); //swr에서 넘겨준 api가 오면 axios.get요청을 보낸다\n//fetcher에서 넣은 주소를 매개변수로 넣어주고, 응답값에서 data꺼내 줌\nexport default fetcher;\n"],"names":["React","Wrap","styled","_templateObject","initialData","_useState2","useState","value","setValue","useCallback","e","target","_useSWR","useSWR","fetcher","data","_useInput2","error","mutate","_slicedToArray","useInput","email","onChangeEmail","_useInput4","nickname","onChangeNickname","password","setPassword","_useState4","passwordCheck","setPasswordCheck","_useState6","mismatchError","setMismatchError","_useState8","signUpError","setSignUpError","_useState10","signUpSuccess","setSignUpSuccess","onChangePassword","onChangePasswordCheck","onSubmit","preventDefault","console","log","axios","then","response","catch","finally","undefined","Loading","Redirect","to","id","Header","Form","Label","Input","type","name","onChange","Error","Success","Button","LinkContainer","Link","_taggedTemplateLiteral","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","url","withCredentials"],"sourceRoot":""}