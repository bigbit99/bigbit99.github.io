{"version":3,"file":"256.js","mappings":"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","sources":["webpack://sleact-ts-front/./components/ChatBox/styles.tsx","webpack://sleact-ts-front/./components/ChatBox/index.tsx","webpack://sleact-ts-front/./components/Chat/styles.tsx","webpack://sleact-ts-front/./components/Chat/index.tsx","webpack://sleact-ts-front/./components/ChatList/styles.tsx","webpack://sleact-ts-front/./components/ChatList/index.tsx","webpack://sleact-ts-front/./pages/Channel/styles.tsx","webpack://sleact-ts-front/./pages/Channel/index.tsx","webpack://sleact-ts-front/./utils/makeSection.ts"],"sourcesContent":["import styled from '@emotion/styled';\nimport { MentionsInput } from 'react-mentions';\n\nexport const ChatArea = styled.div`\n  display: flex;\n  width: 100%;\n  padding: 20px;\n  padding-top: 0;\n`;\n\nexport const Form = styled.form`\n  color: rgb(29, 28, 29);\n  font-size: 15px;\n  width: 100%;\n  border-radius: 4px;\n  border: 1px solid rgb(29, 28, 29);\n`;\n\nexport const MentionsTextarea = styled(MentionsInput)`\n  font-family: Slack-Lato, appleLogo, sans-serif;\n  font-size: 15px;\n  padding: 8px 9px;\n  width: 100%;\n  & strong {\n    background: skyblue;\n  }\n  & textarea {\n    height: 44px;\n    padding: 9px 10px !important;\n    outline: none !important;\n    border-radius: 4px !important;\n    resize: none !important;\n    line-height: 22px;\n    border: none;\n  }\n  & ul {\n    border: 1px solid lightgray;\n    max-height: 200px;\n    overflow-y: auto;\n    padding: 9px 10px;\n    background: white;\n    border-radius: 4px;\n    width: 150px;\n  }\n`;\n\nexport const Toolbox = styled.div`\n  position: relative;\n  background: rgb(248, 248, 248);\n  height: 41px;\n  display: flex;\n  border-top: 1px solid rgb(221, 221, 221);\n  align-items: center;\n  border-bottom-left-radius: 4px;\n  border-bottom-right-radius: 4px;\n`;\n\nexport const SendButton = styled.button`\n  position: absolute;\n  right: 5px;\n  top: 5px;\n`;\n\nexport const EachMention = styled.button<{ focus: boolean }>`\n  padding: 4px 20px;\n  background: transparent;\n  border: none;\n  display: flex;\n  align-items: center;\n  color: rgb(28, 29, 28);\n  width: 100%;\n  & img {\n    margin-right: 5px;\n  }\n  ${({ focus }) =>\n    focus &&\n    `\n    background: #1264a3;\n    color: white;\n  `};\n`;\n","import { ChatArea, EachMention, Form, MentionsTextarea, SendButton, Toolbox } from '@components/ChatBox/styles';\nimport { IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport React, { useCallback, useEffect, useRef, VFC } from 'react';\nimport autosize from 'autosize';\nimport { Mention, SuggestionDataItem } from 'react-mentions';\nimport { useParams } from 'react-router';\nimport useSWR from 'swr';\nimport gravatar from 'gravatar';\n\ninterface Props {\n  chat: string;\n  onSubmitForm: (e: any) => void;\n  onChangeChat: (e: any) => void;\n  placeholder?: string;\n}\nconst ChatBox: VFC<Props> = ({ chat, onSubmitForm, onChangeChat, placeholder }) => {\n  const { workspace } = useParams<{ workspace: string }>();\n  const {\n    data: userData,\n    error,\n    mutate,\n  } = useSWR<IUser | false>('/api/users', fetcher, {\n    dedupingInterval: 2000, // 2초\n  });\n  const { data: memberData } = useSWR<IUser[]>(userData ? `/api/workspaces/${workspace}/members` : null, fetcher);\n\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  useEffect(() => {\n    if (textareaRef.current) {\n      autosize(textareaRef.current);\n    }\n  }, []);\n\n  const onKeydownChat = useCallback(\n    (e) => {\n      if (e.key === 'Enter') {\n        if (!e.shiftKey) {\n          e.preventDefault();\n          onSubmitForm(e);\n        }\n      }\n    },\n    [onSubmitForm],\n  );\n\n  const renderSuggestion = useCallback(\n    (\n      suggestion: SuggestionDataItem,\n      search: string,\n      highlightedDisplay: React.ReactNode,\n      index: number,\n      focus: boolean,\n    ): React.ReactNode => {\n      if (!memberData) return;\n      return (\n        <EachMention focus={focus}>\n          <img\n            src={gravatar.url(memberData[index].email, { s: '20px', d: 'retro' })}\n            alt={memberData[index].nickname}\n          />\n          <span>{highlightedDisplay}</span>\n        </EachMention>\n      );\n    },\n    [memberData],\n  );\n\n  return (\n    <ChatArea>\n      <Form onSubmit={onSubmitForm}>\n        <MentionsTextarea\n          id=\"editor-chat\"\n          value={chat}\n          onChange={onChangeChat}\n          onKeyPress={onKeydownChat}\n          placeholder={placeholder}\n          inputRef={textareaRef}\n          allowSuggestionsAboveCursor\n        >\n          <Mention\n            appendSpaceOnAdd\n            trigger=\"@\"\n            data={memberData?.map((v) => ({ id: v.id, display: v.nickname })) || []}\n            renderSuggestion={renderSuggestion}\n          />\n        </MentionsTextarea>\n        <Toolbox>\n          <SendButton\n            className={\n              'c-button-unstyled c-icon_button c-icon_button--light c-icon_button--size_medium c-texty_input__button c-texty_input__button--send' +\n              (chat?.trim() ? '' : ' c-texty_input__button--disabled')\n            }\n            data-qa=\"texty_send_button\"\n            aria-label=\"Send message\"\n            data-sk=\"tooltip_parent\"\n            type=\"submit\"\n            disabled={!chat?.trim()}\n          >\n            <i className=\"c-icon c-icon--paperplane-filled\" aria-hidden=\"true\" />\n          </SendButton>\n        </Toolbox>\n      </Form>\n    </ChatArea>\n  );\n};\n\nexport default ChatBox;\n","import styled from '@emotion/styled';\n\nexport const ChatWrapper = styled.div`\n  display: flex;\n  padding: 8px 20px;\n  &:hover {\n    background: #eee;\n  }\n  & .chat-img {\n    display: flex;\n    width: 36px;\n    margin-right: 8px;\n    & img {\n      width: 36px;\n      height: 36px;\n    }\n  }\n`;\n","import { IDM, IChat } from '@typings/db';\nimport React, { VFC, memo, useMemo } from 'react';\nimport { ChatWrapper } from '@components/Chat/styles';\nimport gravatar from 'gravatar';\nimport dayjs from 'dayjs';\nimport regexifyString from 'regexify-string';\nimport { Link, useParams } from 'react-router-dom';\n\ninterface Props {\n  data: IDM | IChat;\n}\n\nconst Chat: VFC<Props> = ({ data }) => {\n  const { workspace } = useParams<{ workspace: string; channel: string }>();\n  const user = 'Sender' in data ? data.Sender : data.User; //타입가드\n\n  const result = useMemo(\n    () =>\n      regexifyString({\n        input: data.content,\n        pattern: /@\\[(.+?)]\\((\\d+?)\\)|\\n/g,\n        decorator(match, index) {\n          const arr: string[] | null = match.match(/@\\[(.+?)]\\((\\d+?)\\)/)!;\n          if (arr) {\n            return (\n              <Link key={match + index} to={`/workspace/${workspace}/dm/${arr[2]}`}>\n                @{arr[1]}\n              </Link>\n            );\n          }\n          return <br key={index} />;\n        },\n      }),\n    [data.content],\n  );\n  //\\d 는 숫자 , +는 1개 이상 , ?는 0개나 1개 , *이 0개 이상 , g는 모두찾기\n\n  return (\n    <ChatWrapper>\n      <div className=\"chat-img\">\n        <img src={gravatar.url(user.email, { s: '36px', d: 'retro' })} alt={user.nickname} />\n      </div>\n      <div className=\"chat-text\">\n        <div className=\"chat-user\">\n          <b>{user.nickname}</b>\n          <span>{dayjs(data.createdAt).format('h:mm A')}</span>\n        </div>\n        <p>{result}</p>\n      </div>\n    </ChatWrapper>\n  );\n};\n\nexport default memo(Chat);\n","import styled from '@emotion/styled';\n\nexport const ChatZone = styled.div`\n  width: 100%;\n  display: flex;\n  flex: 1;\n`;\n\nexport const Section = styled.section`\n  margin-top: 20px;\n  border-top: 1px solid #eee;\n`;\n\nexport const StickyHeader = styled.div`\n  display: flex;\n  justify-content: center;\n  flex: 1;\n  width: 100%;\n  position: sticky;\n  top: 14px;\n  & button {\n    font-weight: bold;\n    font-size: 13px;\n    height: 28px;\n    line-height: 27px;\n    padding: 0 16px;\n    z-index: 2;\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 1px 3px 0 rgba(0, 0, 0, 0.08);\n    border-radius: 24px;\n    position: relative;\n    top: -13px;\n    background: white;\n    border: none;\n    outline: none;\n  }\n`;\n","import Chat from '@components/Chat';\nimport { ChatZone, Section, StickyHeader } from '@components/ChatList/styles';\nimport { IDM, IChat } from '@typings/db';\nimport React, { useCallback, forwardRef, RefObject, MutableRefObject } from 'react';\nimport { Scrollbars } from 'react-custom-scrollbars';\n\ninterface Props {\n  chatSections: { [key: string]: (IDM | IChat)[] };\n  setSize: (f: (size: number) => number) => Promise<(IDM | IChat)[][] | undefined>;\n  isReachingEnd: boolean;\n}\nconst ChatList = forwardRef<Scrollbars, Props>(({ chatSections, setSize, isReachingEnd }, scrollRef) => {\n  const onScroll = useCallback(\n    (values) => {\n      if (values.scrollTop === 0 && !isReachingEnd) {\n        console.log('가장 위');\n        setSize((prevSize) => prevSize + 1).then(() => {\n          // 스크롤 위치 유지\n          const current = (scrollRef as MutableRefObject<Scrollbars>)?.current;\n          if (current) {\n            current.scrollTop(current.getScrollHeight() - values.scrollHeight);\n          }\n        });\n      }\n    },\n    [scrollRef, isReachingEnd, setSize],\n  );\n\n  return (\n    <ChatZone>\n      <Scrollbars autoHide ref={scrollRef} onScrollFrame={onScroll}>\n        {Object.entries(chatSections).map(([date, chats]) => {\n          return (\n            <Section className={`section-${date}`} key={date}>\n              <StickyHeader>\n                <button>{date}</button>\n              </StickyHeader>\n              {chats.map((chat) => (\n                <Chat key={chat.id} data={chat} />\n              ))}\n            </Section>\n          );\n        })}\n      </Scrollbars>\n    </ChatZone>\n  );\n});\n\nexport default ChatList;\n\n// import Chat from '@components/Chat';\n// import { ChatZone, Section, StickyHeader } from '@components/ChatList/styles';\n// import { IDM, IChat } from '@typings/db';\n// import React, { useCallback, forwardRef, RefObject, MutableRefObject, useRef, VFC } from 'react';\n// import { Scrollbars } from 'react-custom-scrollbars';\n\n// interface Props {\n//   chatSections: { [key: string]: (IDM | IChat)[] };\n//   setSize: (f: (size: number) => number) => Promise<(IDM | IChat)[][] | undefined>;\n//   isEmpty: boolean;\n//   isReachingEnd: boolean;\n//   scrollRef: RefObject<Scrollbars>;\n// }\n// const ChatList = forwardRef<Scrollbars, Props>(({ chatSections, setSize, scrollRef, isEmpty, isReachingEnd }) => {\n//   const onScroll = useCallback((values) => {\n//     if (values.scrollTop === 0 && !isReachingEnd) {\n//       console.log('가장 위');\n//       //데이터추가 로딩!\n//       setSize((prevSize) => prevSize + 1).then(() => {\n//         //스크롤 위치 유지\n//         if (scrollRef?.current) {\n//           console.log(scrollRef.current?.getScrollHeight(), values.scrollHeight);\n//           scrollRef.current?.scrollTop(scrollRef.current?.getScrollHeight() - values.scrollHeight);\n//         }\n//       });\n//     }\n//   }, []);\n\n//   return (\n//     <ChatZone>\n//       <Scrollbars autoHide ref={scrollRef} onScrollFrame={onScroll}>\n//         {Object.entries(chatSections).map(([date, chats]) => {\n//           return (\n//             <Section className={`section-${date}`} key={date}>\n//               <StickyHeader>\n//                 <button>{date}</button>\n//               </StickyHeader>\n//               {chats.map((chat) => (\n//                 <Chat key={chat.id} data={chat} />\n//               ))}\n//             </Section>\n//           );\n//         })}\n//       </Scrollbars>\n//     </ChatZone>\n//   );\n// });\n\n// export default ChatList;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  height: calc(100vh - 38px);\n  flex-flow: column;\n  position: relative;\n`;\n\nexport const Header = styled.header`\n  height: 64px;\n  display: flex;\n  width: 100%;\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n  box-shadow: 0 1px 0 var(--saf-0);\n  padding: 20px 16px 20px 20px;\n  font-weight: bold;\n  align-items: center;\n\n  & .header-right {\n    display: flex;\n    flex: 1;\n    justify-content: flex-end;\n    align-items: center;\n  }\n`;\n\n// export const DragOver = styled.div`\n//   position: absolute;\n//   top: 64px;\n//   left: 0;\n//   width: 100%;\n//   height: calc(100% - 64px);\n//   background: white;\n//   opacity: 0.7;\n//   display: flex;\n//   align-items: center;\n//   justify-content: center;\n//   font-size: 40px;\n// `;\n","import ChatBox from '@components/ChatBox';\nimport ChatList from '@components/ChatList';\nimport InviteChannelModal from '@components/InviteChannelModal';\nimport useInput from '@hooks/useInput';\nimport useSocket from '@hooks/useSocket';\nimport { Container, Header } from '@pages/Channel/styles';\nimport { IChannel, IChat, IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport makeSection from '@utils/makeSection';\nimport axios from 'axios';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport Scrollbars from 'react-custom-scrollbars';\nimport { useParams } from 'react-router';\nimport useSWR from 'swr';\nimport useSWRInfinite from 'swr/infinite';\nconst Channel = () => {\n  const { workspace, channel } = useParams<{ workspace: string; channel: string }>();\n  const { data: myData } = useSWR('/api/users', fetcher);\n  const [chat, onChangeChat, setChat] = useInput('');\n  const { data: channelData } = useSWR<IChannel>(`/api/workspaces/${workspace}/channels/${channel}`, fetcher);\n  const {\n    data: chatData,\n    mutate: mutateChat,\n    mutate,\n    setSize,\n  } = useSWRInfinite<IChat[]>(\n    (index) => `/api/workspaces/${workspace}/channels/${channel}/chats?perPage=20&page=${index + 1}`,\n    fetcher,\n  );\n  const { data: channelMembersData } = useSWR<IUser[]>(\n    myData ? `/api/workspaces/${workspace}/channels/${channel}/members` : null,\n    fetcher,\n  );\n  const [socket] = useSocket(workspace);\n  const isEmpty = chatData?.[0]?.length === 0;\n  const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < 20) || false;\n  const scrollbarRef = useRef<Scrollbars>(null);\n  const [showInviteChannelModal, setShowInviteChannelModal] = useState(false);\n  const [dragOver, setDragOver] = useState(false);\n\n  // 0초 A: 안녕~(optimistic UI)\n  // 1초 B: 안녕~\n  // 2초 A: 안녕~(실제 서버)\n\n  const onSubmitForm = useCallback(\n    (e) => {\n      e.preventDefault();\n      console.log(chat);\n      if (chat?.trim() && chatData && channelData) {\n        const savedChat = chat;\n        mutateChat((prevChatData) => {\n          prevChatData?.[0].unshift({\n            id: (chatData[0][0]?.id || 0) + 1,\n            content: savedChat,\n            UserId: myData.id,\n            User: myData,\n            ChannelId: channelData.id,\n            Channel: channelData,\n            createdAt: new Date(),\n          });\n          return prevChatData;\n        }, false).then(() => {\n          setChat('');\n          scrollbarRef.current?.scrollToBottom();\n        });\n        axios\n          .post(`/api/workspaces/${workspace}/channels/${channel}/chats`, {\n            content: chat,\n          })\n          .then(() => {\n            mutate();\n          })\n          .catch(console.error);\n      }\n    },\n    [chat, chatData, myData, channelData, workspace, channel],\n  );\n\n  const onMessage = useCallback(\n    (data: IChat) => {\n      // id는 상대방 아이디\n      if (data.Channel.name === channel && (data.content.startsWith('uploads\\\\') || data.UserId !== myData?.id)) {\n        mutateChat((chatData) => {\n          chatData?.[0].unshift(data);\n          return chatData;\n        }, false).then(() => {\n          if (scrollbarRef.current) {\n            if (\n              scrollbarRef.current.getScrollHeight() <\n              scrollbarRef.current.getClientHeight() + scrollbarRef.current.getScrollTop() + 150\n            ) {\n              console.log('scrollToBottom!', scrollbarRef.current?.getValues());\n              setTimeout(() => {\n                scrollbarRef.current?.scrollToBottom();\n              }, 50);\n            }\n          }\n        });\n      }\n    },\n    [channel, myData],\n  );\n\n  useEffect(() => {\n    socket?.on('message', onMessage);\n    return () => {\n      socket?.off('message', onMessage);\n    };\n  }, [socket, onMessage]);\n\n  // 로딩 시 스크롤바 제일 아래로\n  useEffect(() => {\n    if (chatData?.length === 1) {\n      console.log('toBottomWhenLoaded', scrollbarRef.current);\n      setTimeout(() => {\n        console.log('scrollbar', scrollbarRef.current);\n        scrollbarRef.current?.scrollToBottom();\n      }, 500);\n    }\n  }, [chatData]);\n\n  const onClickInviteChannel = useCallback(() => {\n    setShowInviteChannelModal(true);\n  }, []);\n\n  const onCloseModal = useCallback(() => {\n    setShowInviteChannelModal(false);\n  }, []);\n\n  const onChangeFile = useCallback((e) => {\n    const formData = new FormData();\n    if (e.target.files) {\n      // Use DataTransferItemList interface to access the file(s)\n      for (let i = 0; i < e.target.files.length; i++) {\n        const file = e.target.files[i].getAsFile();\n        console.log('... file[' + i + '].name = ' + file.name);\n        formData.append('image', file);\n      }\n    }\n    axios.post(`/api/workspaces/${workspace}/channels/${channel}/images`, formData).then(() => {});\n  }, []);\n\n  const onDrop = useCallback(\n    (e) => {\n      e.preventDefault();\n      console.log(e);\n      const formData = new FormData();\n      if (e.dataTransfer.items) {\n        // Use DataTransferItemList interface to access the file(s)\n        for (let i = 0; i < e.dataTransfer.items.length; i++) {\n          // If dropped items aren't files, reject them\n          if (e.dataTransfer.items[i].kind === 'file') {\n            const file = e.dataTransfer.items[i].getAsFile();\n            console.log(e, '.... file[' + i + '].name = ' + file.name);\n            formData.append('image', file);\n          }\n        }\n      } else {\n        // Use DataTransfer interface to access the file(s)\n        for (let i = 0; i < e.dataTransfer.files.length; i++) {\n          console.log(e, '... file[' + i + '].name = ' + e.dataTransfer.files[i].name);\n          formData.append('image', e.dataTransfer.files[i]);\n        }\n      }\n      axios.post(`/api/workspaces/${workspace}/channels/${channel}/images`, formData).then(() => {\n        setDragOver(false);\n      });\n    },\n    [workspace, channel],\n  );\n\n  const onDragOver = useCallback((e) => {\n    e.preventDefault();\n    console.log(e);\n    setDragOver(true);\n  }, []);\n\n  if (!myData) {\n    return null;\n  }\n\n  const chatSections = makeSection(chatData ? chatData.flat().reverse() : []);\n\n  return (\n    <Container onDrop={onDrop} onDragOver={onDragOver}>\n      <Header>\n        <span>#{channel}</span>\n        <div className=\"header-right\">\n          <span>{channelMembersData?.length}</span>\n          <button\n            onClick={onClickInviteChannel}\n            className=\"c-button-unstyled p-ia__view_header__button\"\n            aria-label=\"Add people to #react-native\"\n            data-sk=\"tooltip_parent\"\n            type=\"button\"\n          >\n            <i className=\"c-icon p-ia__view_header__button_icon c-icon--add-user\" aria-hidden=\"true\" />\n          </button>\n        </div>\n      </Header>\n      <ChatList chatSections={chatSections} ref={scrollbarRef} setSize={setSize} isReachingEnd={isReachingEnd} />\n      <ChatBox chat={chat} onChangeChat={onChangeChat} onSubmitForm={onSubmitForm} />\n      <InviteChannelModal\n        show={showInviteChannelModal}\n        onCloseModal={onCloseModal}\n        setShowInviteChannelModal={setShowInviteChannelModal}\n      />\n    </Container>\n  );\n};\n\nexport default Channel;\n","import { IDM, IChat } from '@typings/db';\nimport dayjs from 'dayjs';\n\nexport default function makeSection(chatList: (IDM | IChat)[]) {\n  const sections: { [key: string]: (IDM | IChat)[] } = {};\n  chatList.forEach((chat) => {\n    const monthDate = dayjs(chat.createdAt).format('YYYY-MM-DD');\n    if (Array.isArray(sections[monthDate])) {\n      sections[monthDate].push(chat);\n    } else {\n      sections[monthDate] = [chat];\n    }\n  });\n  return sections;\n}\n"],"names":["ChatArea","styled","_templateObject","_taggedTemplateLiteral","Form","_templateObject2","MentionsTextarea","MentionsInput","_templateObject3","Toolbox","_templateObject4","SendButton","_templateObject5","EachMention","_templateObject6","_ref","focus","chat","onSubmitForm","onChangeChat","placeholder","workspace","useParams","_useSWR","useSWR","fetcher","dedupingInterval","userData","data","memberData","error","mutate","concat","textareaRef","useRef","useEffect","current","autosize","onKeydownChat","useCallback","e","key","shiftKey","preventDefault","renderSuggestion","suggestion","search","highlightedDisplay","index","React","src","gravatar","email","s","d","alt","nickname","onSubmit","id","value","onChange","onKeyPress","inputRef","allowSuggestionsAboveCursor","Mention","appendSpaceOnAdd","trigger","map","v","display","className","trim","type","disabled","ChatWrapper","Chat","user","Sender","User","result","useMemo","regexifyString","input","content","pattern","decorator","match","arr","Link","to","dayjs","createdAt","format","memo","ChatZone","Section","StickyHeader","forwardRef","scrollRef","chatSections","setSize","isReachingEnd","onScroll","values","scrollTop","console","log","prevSize","then","getScrollHeight","scrollHeight","Scrollbars","autoHide","ref","onScrollFrame","Object","entries","_ref2","_ref3","date","chats","Container","Header","_chatData$","_chatData","_useParams","channel","myData","_useInput2","_slicedToArray","useInput","setChat","channelData","_useSWRInfinite","useSWRInfinite","chatData","mutateChat","channelMembersData","socket","useSocket","length","scrollbarRef","_useState2","useState","showInviteChannelModal","setShowInviteChannelModal","_useState4","setDragOver","savedChat","prevChatData","_chatData$0$","unshift","UserId","ChannelId","Channel","Date","_scrollbarRef$current","scrollToBottom","axios","catch","onMessage","name","startsWith","_scrollbarRef$current2","getClientHeight","getScrollTop","getValues","setTimeout","_scrollbarRef$current3","on","off","_scrollbarRef$current4","onClickInviteChannel","onCloseModal","onDrop","formData","FormData","target","files","i","file","getAsFile","append","dataTransfer","items","kind","onDragOver","makeSection","flat","reverse","onClick","ChatList","ChatBox","InviteChannelModal","show","chatList","sections","forEach","monthDate","Array","isArray","push"],"sourceRoot":""}